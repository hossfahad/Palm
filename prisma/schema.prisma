// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ClientStatus {
  ACTIVE
  PENDING
  INACTIVE
  ARCHIVED
}

enum GivingVehicle {
  DAF
  FOUNDATION
  TRUST
  DIRECT
}

enum ReportType {
  MONTHLY_SUMMARY
  QUARTERLY_DETAIL
  ANNUAL_IMPACT
  TAX_DOCUMENTS
  GRANT_HISTORY
}

enum AddressType {
  home
  business
  mailing
}

enum AccessLevel {
  view
  recommend
  none
}

enum CommunicationFrequency {
  weekly
  monthly
  quarterly
}

enum FamilyMeetingFrequency {
  monthly
  quarterly
  annually
}

enum KYCStatus {
  pending
  approved
  rejected
}

enum DocumentType {
  AGREEMENT
  TAX
  GRANT_LETTER
  CORRESPONDENCE
}

model Client {
  id        String      @id @default(cuid())
  status    ClientStatus
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Basic Information
  firstName        String
  lastName         String
  email           String   @unique
  phone           String?
  dateOfBirth     DateTime?
  preferredName   String?
  preferredPronouns String?

  // Contact Information
  primaryAddress   Address @relation("PrimaryAddress", fields: [primaryAddressId], references: [id])
  primaryAddressId String  @unique
  alternateAddress Address? @relation("AlternateAddress", fields: [alternateAddressId], references: [id])
  alternateAddressId String? @unique
  preferredContactMethod String
  timeZone        String?

  // Relationship Information
  advisorId       String
  relationshipStartDate DateTime
  firmClientId    String?
  secondaryAdvisors String[]
  relationshipManager String?

  // Philanthropic Profile
  causeAreas      String[]
  givingGoals     GivingGoals?
  grantPreferences GrantPreferences?

  // Accounts
  dafs           DAFAccount[]
  otherAccounts  OtherGivingAccount[]

  // Preferences
  preferences    ClientPreferences @relation(fields: [preferencesId], references: [id])
  preferencesId  String @unique

  // Family & Legacy
  familyInfo     FamilyInfo?

  // Documents
  documents      Documents?

  // Compliance & Security
  compliance     Compliance @relation(fields: [complianceId], references: [id])
  complianceId   String @unique

  // Access Management
  access        Access @relation(fields: [accessId], references: [id])
  accessId      String @unique

  invitations        ClientAccessInvitation[]
}

model Address {
  id          String      @id @default(cuid())
  street1     String
  street2     String?
  city        String
  state       String
  postalCode  String
  country     String
  type        AddressType

  clientPrimary    Client?  @relation("PrimaryAddress")
  clientAlternate  Client?  @relation("AlternateAddress")
}

model GivingGoals {
  id            String      @id @default(cuid())
  annualTarget  Float?
  impactAreas   String[]
  preferredVehicles GivingVehicle[]
  client        Client     @relation(fields: [clientId], references: [id])
  clientId      String     @unique
}

model GrantPreferences {
  id                String   @id @default(cuid())
  anonymous         Boolean
  recurringPreferred Boolean
  minimumGrantSize  Float?
  client           Client   @relation(fields: [clientId], references: [id])
  clientId         String   @unique
}

model User {
  id            String      @id @default(cuid())
  email         String      @unique
  name          String?
  role          String      @default("user")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  dafAccounts   DAFAccount[]
}

model DAFAccount {
  id            String          @id @default(cuid())
  externalId    String         @unique
  status        String         @default("draft")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  name          String
  description   String?
  clientId      String
  advisorId     String
  
  // Relations
  client        Client         @relation(fields: [clientId], references: [id])
  advisor       User           @relation(fields: [advisorId], references: [id])
  sponsorInfo   DAFSponsorInfo?
  balances      DAFBalances?
  accountHolders DAFAccountHolder[]
  grants        DAFGrant[]
  contributions DAFContribution[]
  documents     DAFDocument[]

  @@index([clientId])
  @@index([advisorId])
}

model DAFSponsorInfo {
  id          String    @id @default(cuid())
  name        String
  type        String
  externalId  String?
  details     Json?
  dafAccountId String   @unique
  dafAccount  DAFAccount @relation(fields: [dafAccountId], references: [id], onDelete: Cascade)

  @@index([dafAccountId])
}

model DAFBalances {
  id                String    @id @default(cuid())
  currentBalance    Float
  pendingBalance   Float?
  totalContributions Float
  totalGrants      Float?
  availableToGrant Float?
  currency         String    @default("USD")
  lastUpdated      DateTime  @default(now())
  dafAccountId     String    @unique
  dafAccount       DAFAccount @relation(fields: [dafAccountId], references: [id], onDelete: Cascade)

  @@index([dafAccountId])
}

model DAFAccountHolder {
  id            String    @id @default(cuid())
  type          String
  permissions   Json?
  relationship  String?
  dateAdded     DateTime  @default(now())
  lastAccess    DateTime?
  dafAccountId  String
  dafAccount    DAFAccount @relation(fields: [dafAccountId], references: [id], onDelete: Cascade)

  @@index([dafAccountId])
}

model DAFGrant {
  id            String    @id @default(cuid())
  amount        Float
  status        String
  charityName   String
  charityEIN    String
  requestedDate DateTime  @default(now())
  approvedDate  DateTime?
  paidDate      DateTime?
  scheduledDate DateTime?
  purpose       String?
  anonymous     Boolean   @default(false)
  dafAccountId  String
  dafAccount    DAFAccount @relation(fields: [dafAccountId], references: [id], onDelete: Cascade)

  @@index([dafAccountId])
}

model DAFContribution {
  id            String    @id @default(cuid())
  amount        Float
  type          String
  status        String
  date          DateTime  @default(now())
  sourceType    String
  sourceDetails Json?
  assetType     String
  assetDetails  Json?
  taxReceiptIssued Boolean @default(false)
  taxReceiptDate DateTime?
  taxReceiptId  String?
  dafAccountId  String
  dafAccount    DAFAccount @relation(fields: [dafAccountId], references: [id], onDelete: Cascade)

  @@index([dafAccountId])
}

model DAFDocument {
  id            String    @id @default(cuid())
  type          String
  title         String
  url           String
  uploadedBy    String
  uploadedAt    DateTime  @default(now())
  metadata      Json?
  expiresAt     DateTime?
  tags          String[]
  dafAccountId  String
  dafAccount    DAFAccount @relation(fields: [dafAccountId], references: [id], onDelete: Cascade)

  @@index([dafAccountId])
}

model OtherGivingAccount {
  id            String        @id @default(cuid())
  type          GivingVehicle
  name          String
  balance       Float
  institution   String?
  client        Client       @relation(fields: [clientId], references: [id])
  clientId      String
}

model ClientPreferences {
  id                    String    @id @default(cuid())
  communicationFrequency CommunicationFrequency
  reportingPreferences   ReportType[]
  marketingConsent      Boolean
  languagePreference    String
  client               Client?
}

model FamilyMember {
  id                      String      @id @default(cuid())
  relationship           String
  name                   String
  email                  String?
  philanthropicInvolvement Boolean
  accessLevel            AccessLevel?
  familyInfo            FamilyInfo   @relation(fields: [familyInfoId], references: [id])
  familyInfoId          String
}

model SuccessorPlan {
  id            String    @id @default(cuid())
  successorType String
  successors    Json      // Stored as JSON array of successor objects
  familyInfo    FamilyInfo @relation(fields: [familyInfoId], references: [id])
  familyInfoId  String
}

model FamilyInfo {
  id                    String    @id @default(cuid())
  familyMembers         FamilyMember[]
  successorPlans        SuccessorPlan[]
  familyMeetingFrequency FamilyMeetingFrequency?
  nextGenPrograms       Boolean
  familyGivingCommittee Boolean?
  educationPrograms     String[]
  client               Client    @relation(fields: [clientId], references: [id])
  clientId             String    @unique
}

model Document {
  id            String      @id @default(cuid())
  type          String      // "AGREEMENT" | "TAX" | "GRANT_LETTER" | "CORRESPONDENCE"
  name          String
  url           String
  uploadedAt    DateTime
  documents     Documents   @relation(fields: [documentsId], references: [id])
  documentsId   String
}

model Documents {
  id            String     @id @default(cuid())
  documents     Document[]
  client        Client     @relation(fields: [clientId], references: [id])
  clientId      String     @unique
}

model Compliance {
  id            String    @id @default(cuid())
  kycStatus     KYCStatus
  kycDate       DateTime?
  riskRating    String?
  restrictions  String[]
  client        Client?
}

model Access {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Access Control
  canView       Boolean   @default(false)
  canEdit       Boolean   @default(false)
  canDelete     Boolean   @default(false)
  canInvite     Boolean   @default(false)
  
  // Specific Permissions
  grantAccess   Boolean   @default(false)
  reportAccess  Boolean   @default(false)
  documentAccess Boolean  @default(false)
  
  // Role-based Access
  role          String?
  customPermissions Json?
  
  // Relationships
  client        Client?
  invitations   ClientAccessInvitation[]
}

model ClientAccessInvitation {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  expiresAt     DateTime
  email         String
  status        String    // "PENDING" | "ACCEPTED" | "EXPIRED"
  
  // Relationships
  access        Access    @relation(fields: [accessId], references: [id])
  accessId      String
  client        Client    @relation(fields: [clientId], references: [id])
  clientId      String
} 